// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  username                String
  email                   String              @unique
  phoneNumber             String              @unique
  password                String
  isLandord               Boolean             @default(false)
  isTenant                Boolean             @default(true)
  isAgent                 Boolean             @default(false)
  isVerified              Boolean             @default(false)
  googleId                String?             @map("google_id")
  verificationOtp         String?
  verificationOtpExpires  DateTime?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  Property                Property[]
  applcations             application[]
  TenantLeaseAgreements   LeaseAgreement[]    @relation("TenantLeaseAgreements")
  LandlordLeaseAgreements LeaseAgreement[]    @relation("LandlordLeaseAgreements") // Add 
  management_request      ManagementRequest[]
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  DUPLEX
  TRIPLEX
  QUADRUPLEX
  PENTHOUSE
  VILLA
  MANSION
  CASTLE
  COTTAGE
  BUNGALOW
  RANCH
  FARMHOUSE
  MOBILE_HOME
  TINY_HOME
  YURT
  TENT
  TREEHOUSE
  BOAT
  RV
  CAMPER
  TEEPEE
  CAVE
  ISLAND
  OTHER
}

model Property {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  price              Float
  annualRent         Float  // the amount of rent per year set by the landlord
  otherCharges       Float // any extra charges for the property
  platformFee        Float // 8% of the annual rent
  bedrooms           Int
  bathrooms          Int
  propertyType       PropertyType
  location           String
  images             String[]
  applcations        application[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             String              @db.ObjectId
  user               User                @relation(fields: [userId], references: [id])
  LeaseAgreement     LeaseAgreement[]
  management_request ManagementRequest[]
}

model LeaseAgreement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  terms       String?
  price       Float
  propertyId  String    @db.ObjectId
  property    Property  @relation(fields: [propertyId], references: [id])
  tenantId    String    @db.ObjectId
  tenant      User      @relation("TenantLeaseAgreements", fields: [tenantId], references: [id])
  landlordId  String    @db.ObjectId
  landlord    User      @relation("LandlordLeaseAgreements", fields: [landlordId], references: [id]) // Matches the relation in User
  startDate   DateTime
  endDate     DateTime
  renewalDate DateTime?
  paymentFrequency String?
  paymentStatus    String @default("PENDING")
  paymentDate      DateTime?
  paymentMethod    String?
  receipt         String?  // URL to the receipt
  status      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Tenant References
  references Reference[]

  // Employment Details
  employment EmploymentDetails?

  @@index([landlordId], name: "landlordId")
}

model Reference {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phoneNumber   String
  relationship  String
  lease LeaseAgreement @relation(fields: [leaseId], references: [id])
  leaseId String @unique @db.ObjectId
}

model EmploymentDetails {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  occupation String
  company    String
  address    String
  yearsWorked Int
  otherIncomeSource String?
  lease       LeaseAgreement @relation(fields: [leaseId], references: [id])
  leaseId String @unique @db.ObjectId
}

model application {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?   @db.ObjectId
  status     status    @default(PENDING)
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum status {
  PENDING
  APPROVED
  REJECTED
}

model ManagementRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  userId      String   @db.ObjectId
  User        User     @relation(fields: [userId], references: [id])
  propertyId  String   @db.ObjectId
  property    Property @relation(fields: [propertyId], references: [id])
  status      status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([propertyId], name: "propertyId")
  @@index([userId], name: "userId")
}
