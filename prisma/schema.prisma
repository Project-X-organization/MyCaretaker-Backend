// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(auto()) @map("_id") @db.ObjectId
  username                String
  email                   String           @unique
  phoneNumber             String           @unique
  password                String
  isVerified              Boolean          @default(false)
  googleId                String?          @map("google_id")
  verificationOtp         String?
  verificationOtpExpires  DateTime?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  Property                Property[]
  TenantLeaseAgreements   LeaseAgreement[] @relation("TenantLeaseAgreements")
  LandlordLeaseAgreements LeaseAgreement[] @relation("LandlordLeaseAgreements") // Add the missing relation here
}

model Property {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  price          Float
  bedrooms       Int
  bathrooms      Int
  location       String
  images         String[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  LeaseAgreement LeaseAgreement[]

  @@index([userId], name: "userId")
}

model LeaseAgreement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  terms       String
  duration    Int
  price       Float
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  tenantId    String
  tenant      User      @relation("TenantLeaseAgreements", fields: [tenantId], references: [id])
  landlordId  String
  landlord    User      @relation("LandlordLeaseAgreements", fields: [landlordId], references: [id]) // Matches the relation in User
  startDate   DateTime
  endDate     DateTime
  renewalDate DateTime?
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([propertyId], name: "propertyId")
  @@index([tenantId], name: "tenantId")
  @@index([landlordId], name: "landlordId")
}
